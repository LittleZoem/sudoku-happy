import BoxScanner, {getBox, listToString} from './utils';

class StrategyCell {
    constructor(y, x, values) {

        //需要高亮的候选值
        this.highLightValues = [];

        for (let i = 0; i < values.length; i++) {
            this.highLightValues.push(values[i]);
        }

        this.y = y;
        this.x = x;
    }
}

class StrategyUnit {
    constructor(name) {
        this.strategyName = name;

        this.cells = [];  // StrategyCell的数组
    }

    addCell (y, x, values) {
        this.cells.push(new StrategyCell(y, x, values));
    }

    len() {
        return this.cells.length;
    }

    name() {
        return this.strategyName;
    }

    getCells() {
        return this.cells;
    }
}

class StrategyOperator
{
    constructor(name) {
        this.enabled = false;
        this.opName = name;
    }

    begin () {
        this.enabled = true;
    }

    excute (y, x, candidates) {
        if (!this.enabled) {
            console.log(this.opName() + " use excute() before begin()!");
        }
    }

    end () {
        this.enabled = false;
    }

    name() {
        return this.opName;
    }
}

class Strategy
{
    constructor(name, operator, config) {
        this.strategyName = name;
        this.operator = operator;

        //迭代配置
        this.config = config
    }

    run (candidates, cellTrack, strategyUnits) {
        this.init();
        this.iterativeSearch(candidates);
        let ret = this.handle(candidates, cellTrack, strategyUnits);
        return ret;
    }

    init() {

    }

    //迭代查找
    iterativeSearch (candidates) {
        //行迭代
        if (this.config[0]) {
            for (let y = 0; y < 9; y++) {
                this.operator.begin();
                for (let x = 0; x < 9; x++) {
                    this.operator.excute(y, x, candidates);
                }
                this.load(this.operator.end()); 
            }
        }

        //列迭代
        if (this.config[1]) {
            for (let x = 0; x < 9; x++) {
                this.operator.begin();
                for (let y = 0; y < 9; y++) {
                    this.operator.excute(y, x, candidates);
                }
                this.load(this.operator.end());
            }
        }

        //宫迭代
        if (this.config[2]) {
            for (let i = 0; i < 9; i++) {
                let bs = new BoxScanner(0, 0, i);
                this.operator.begin();
                for (bs.begin(); !bs.end(); bs.next()) {
                    this.operator.excute(bs.y, bs.x, candidates);
                }
                this.load(this.operator.end());
            }
        }
    }

    //存储迭代查找的中间结果
    load (midData) {

    }

    //根据迭代查找结果进行匹配和候选值处理
    handle (candidates, cellTrack, strategyUnits) {
        return false;
    }

    name () {
        return this.strategyName;
    }

}

export {
    StrategyCell,
    StrategyUnit,
    StrategyOperator,
    Strategy,
};