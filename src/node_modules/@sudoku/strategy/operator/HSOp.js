import { StrategyOperator } from '../strategy_base';

class HSOperator extends StrategyOperator{
    constructor (){
        super("HSOperator");
        this.hit_pos = []; // 统计1-9每个值在行列宫中出现的位置
    }

    begin () {
        super.begin();
        this.hit_pos = [[], [], [], [], [], [], [], [], []];
    }

    excute (y, x, candidates) {
        // 记录所有候选值
        let list = candidates[y][x];
        for (let i = 0; i < list.length; i++) {
            let value = list[i];
            this.hit_pos[value - 1].push([y, x]);
        }
    }

    end () {
        // console.log("end hit pos: ", this.hit_pos);
        // 根据hit_pos，找到该行列宫中只出现过一次的候选值的位置
        let singles = [];
        for (let i = 0; i < this.hit_pos.length; i++) {
            if (this.hit_pos[i].length === 1) {
                singles.push({
                    yx: this.hit_pos[i][0],
                    value: i + 1
                })
            }
        }
        return singles;
    }
}

export {
    HSOperator
};