import { StrategyCell, StrategyUnit, StrategyOperator, Strategy } from '@sudoku/strategy/strategy';

import BoxScanner, {getBox, listToString} from '@sudoku/strategy/utils';

class HSOperator extends StrategyOperator{
    constructor (){
        super("HSOperator");
        this.hit_pos = []; // 统计1-9每个值在行列宫中出现的位置
        this.singles = []; // 记录只出现过一次的候选值的位置以及值
    }

    begin () {
        super.begin();
        this.hit_pos = [[], [], [], [], [], [], [], [], []];
    }

    excute (y, x, candidates) {
        // 记录所有候选值
        for (let value of candidates[y][x]) {
            hit_pos[value - 1].push([y, x]);
        }
    }

    end () {
        // 根据hit_pos，找到该行列宫中只出现过一次的候选值的位置
        for (let i = 0; i < this.hit_pos.length; i++) {
            if (this.hit_pos[i].length === 1) {
                this.singles.push({
                    y: this.hit_pos[i][0],
                    x: this.hit_pos[i][1],
                    value: i
                })
            }
        }
        return this.singles;
    }
}

class HSStrategy extends Strategy {
    constructor() {
        super("Hidden Singles", new HSOperator(), [true, true, true]);
        // 记录所有行列宫中找到的HiddenSingles（只出现一次的候选值）
        this.hiddenSingles = []; 
    }

    load (midData) {
        // 将行列宫中找到的hiddenSingles收集起来
        for (let single of midData) {
            this.hiddenSingles.push(single);
        }
    }

    handle (candidates, cellTrack, strategyUnits) {
        //返回需要高亮的单元格
        for (let single of this.hiddenSingles) {
            // 搜索所有与hidden_single的相同数字
            let strategyUnit = new StrategyUnit("Hidden Singles");
            for (let i = 0; i < SUDOKU_SIZE; i++) {
                for (let j = 0; j < SUDOKU_SIZE; j++) {
                    if (i !== single.y &&
                        j !== single.x && // 不是hidden single的单元格
                        candidates[i][j].length === 1 && 
                        candidates[i][j].includes(single.value)) {
                        strategyUnit.addCell(i, j, single.value);
                    }
                }
            }
            strategyUnits.push(strategyUnit);
        }

        let flag = false;

        // 根据hidden_singles修改candidates，记录删除的候选值
        for (let single of this.hidden_singles) {
            cellTrack[single.y][single.x] = candidates[single.y][single.x].filter(value => value !== single.value);
            candidates[single.y][single.x] = [single.value];
            flag = true;
        }
        return flag;
    }
}