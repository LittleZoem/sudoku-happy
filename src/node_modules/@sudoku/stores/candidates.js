import { writable } from 'svelte/store';

function createCandidates() {
	const candidates = writable({});

	return {
		subscribe: candidates.subscribe,

		add(pos, candidate) {
			candidates.update($candidates => {
				if (!$candidates.hasOwnProperty(pos.x + ',' + pos.y)) {
					$candidates[pos.x + ',' + pos.y] = [candidate];
				} else if ($candidates[pos.x + ',' + pos.y].includes(candidate)) {
					delete $candidates[pos.x + ',' + pos.y][$candidates[pos.x + ',' + pos.y].indexOf(candidate)];
				} else {
					$candidates[pos.x + ',' + pos.y].push(candidate);
				}

				return $candidates;
			});
		},

		setList(y, x, numberList) {
			if (numberList.length === 0) return;

			candidates.update($candidates => {
				let list = [];

				for (let i = 0; i < numberList.length; i++) {
					list.push(numberList[i]);
				}

				$candidates[x + ',' + y] = list;

				return $candidates;
			});
		},

		clear(pos) {
			candidates.update($candidates => {
				delete $candidates[pos.x + ',' + pos.y];
				return $candidates;
			});
		},

		reset() {
			candidates.set({});
		}
	}
}

export const candidates = createCandidates();

function createInferenceKeys() {
	const inferenceKeys = writable({});

	return {
		subscribe: inferenceKeys.subscribe,

		add(y, x, inferenceKey) {
			inferenceKeys.update($inferenceKeys => {
				if (!$inferenceKeys.hasOwnProperty(x + ',' + y)) {
					$inferenceKeys[x + ',' + y] = [inferenceKey];
				} else {
					$inferenceKeys[x + ',' + y].push(inferenceKey);
				}

				return $inferenceKeys;
			});
		},

		setList(y, x, numberList) {
			if (numberList.length === 0) return;

			inferenceKeys.update($inferenceKeys => {
				let list = [];

				for (let i = 0; i < numberList.length; i++) {
					list.push(numberList[i]);
				}

				$inferenceKeys[x + ',' + y] = list;

				return $inferenceKeys;
			});
		},

		clear(pos) {
			inferenceKeys.update($inferenceKeys => {
				delete $inferenceKeys[pos.x + ',' + pos.y];
				return $inferenceKeys;
			});
		},

		reset() {
			inferenceKeys.set({});
		}
	}
}

export const inferenceKeys = createInferenceKeys();

function createVisitedNums() {
	const visitedNums = writable({});

	return {
		subscribe: visitedNums.subscribe,

		add(pos, num) {
			visitedNums.update($visitedNums => {
				if (!$visitedNums.hasOwnProperty(pos.x + ',' + pos.y)) {
					$visitedNums[pos.x + ',' + pos.y] = [num];
				} else {
					$visitedNums[pos.x + ',' + pos.y].push(num);
				}

				return $visitedNums;
			});
		},

		clear(pos) {
			visitedNums.update($visitedNums => {
				delete $visitedNums[pos.x + ',' + pos.y];
				return $visitedNums;
			});
		},

		reset() {
			visitedNums.set({});
		}
	}
}

export const visitedNums = createVisitedNums();