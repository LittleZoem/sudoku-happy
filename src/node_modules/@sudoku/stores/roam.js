import { writable, get } from "svelte/store";
import { visitedNums } from '@sudoku/stores/candidates';
import { grid } from '@sudoku/stores/grid';
import { BOX_SIZE, SUDOKU_SIZE } from '@sudoku/constants';

class GridState {
    constructor(state, pos, value) {

        this.grid = state;
        this.pos = JSON.parse(JSON.stringify(pos));
        this.value = value;
    }
}

function createRoam() {
    const roam = writable({
        undoStack: [],
        redoStack: [],
        backStack: []
    });

    grid.subscribe($grid => {
		let newGrid = [];

		for (let y = 0; y < SUDOKU_SIZE; y++) {
			newGrid[y] = [];
			for (let x = 0; x < SUDOKU_SIZE; x++) {
				newGrid[y][x] = $grid[y][x];
			}
		}

		roam.update(() => {
            return {
                undoStack: [new GridState(newGrid, null, null)],
                redoStack: [],
                backStack: []
            };
        })
	});

    return {
        subscribe: roam.subscribe,

        record(gridState) {
            roam.update($roam => {
                return {
                    undoStack: [...$roam.undoStack, gridState],
                    redoStack: [],
                    backStack: [...$roam.backStack]
                };
            })
        },

        undo() {
            roam.update($roam => {
                if ($roam.undoStack.length === 1) return $roam;

                const currentState = $roam.undoStack[$roam.undoStack.length - 1]

                if ($roam.undoStack.length - 1 < $roam.backStack[$roam.backStack.length - 1]) {
                    return {
                        undoStack: $roam.undoStack.slice(0, -1),
                        redoStack: [...$roam.redoStack, currentState],
                        backStack: $roam.backStack.slice(0, -1),
                    }
                }

                return {
                    undoStack: $roam.undoStack.slice(0, -1),
                    redoStack: [...$roam.redoStack, currentState],
                    backStack: [...$roam.backStack]
                };
            })

            return get(roam).undoStack.at(-1);
        },

        redo() {
            roam.update($roam => {
                if ($roam.redoStack.length === 0) return $roam;

                const nextState = $roam.redoStack[$roam.redoStack.length - 1];

                return {
                    undoStack: [...$roam.undoStack, nextState],
                    redoStack: $roam.redoStack.slice(0, -1),
                    backStack: [...$roam.backStack]
                };
            })

            return get(roam).undoStack.at(-1);
        },

        save(pos, last) {
            if (last) {
                visitedNums.clear(pos);
            } else {
                roam.update($roam => {
                    return {
                        undoStack: [...$roam.undoStack],
                        redoStack: [...$roam.redoStack],
                        backStack: [...$roam.backStack, $roam.undoStack.length]
                    }
                })
                console.log("backStack : " + get(roam).backStack);
            }
        },

        back() {
            roam.update($roam => {
                let loc = $roam.backStack[$roam.backStack.length - 1] - 1;
                let state = $roam.undoStack[loc];
                visitedNums.add(state.pos, state.value);

                return {
                    undoStack: $roam.undoStack.slice(0, loc),
                    redoStack: [],
                    backStack: $roam.backStack.slice(0, -1)
                }
            })

            return get(roam).undoStack.at(-1);
        }
    };
}

export const roam = createRoam();
export { GridState };